#!/bin/bash

#
# Script file to run b2c on the files in the ../source tree
# 
# This script assumes you are in a parent directory of a collection-directory like
# 'base' below.  It also assumes that the individual project directories are of
# the shape of the 'bandit' directory.
#    
#    ├── base
#    │   ├── bandit
#    │   │   ├── basic
#    │   │   ├── c
#    │   │   ├── cpp
#    │   │   └── python
#    
# This program will take a root directory ('base' in the example above) and will run
# through all the project-directories in that root directory.  For each one of those
# it will take the sub-directory name as the project name (eg. 'bandit') and use that
# to do the following work:
#   1) Create a VARS file for each of the Basic files in <project>/basic
#   2) Compile (b2c) each of those Basic files into C files in the <project>/c directory
#      which will also create <basic-name>.log and <basic-name>.dbg files in the 
#      root directory of the project (eg. bandit)
#   
#    
#
# (Script created by alan on 13/Apr/2022 12:10:27)
#

# Include header to setup standard variables
. /home/alan/bin/header.inc

arg=${1}

root="${HOME}/dev/BasicGames"
src="${root}/b2c_Basic_pgms"
exe="${root}/b2c/bin/Debug/b2c"
log="b2c.log"

function translate()
{
    # Get argument
    file=${1}
    # Get the base part of the file name
    fn=${file%.*}
    echo "file='$file' fn='$fn'"

    # Generate the absolute file name, with BAS, C and LOG extensions
    bfn="./${fn}"
    ifn="${bfn}.bas"
    ofn="${bfn}.c"
    lfn="${bfn}.log"
    dfn="${bfn}.dbg"

    #echo "bfn='$bfn'"
    #echo "ifn='$ifn'"
    #echo "ofn='$ofn'"
    #echo "lfn='$lfn'"
    echo "Processing: $ifn"

    ${exe} -cist -i"${ifn}" -o"${ofn}" &>"${lfn}"
    echo "${exe} -cist -i\"${ifn}\" -o\"${ofn}\" &>\"${lfn}\" "
    cp b2c.dbg ${dfn}

    ls -al "${bfn}"*
}

function make_vars()
{
    fn=${1}
    echo "make_vars: ${fn}"

    # Don't replace a file that already exists
    if [  ! -e "${fn}.vars" ]; then
        echo "  Creating new VARS file"
        

cat <<-EOF >"${fn}.vars"
# Functions

# Intrinsics (Change mangled name back to original name) 
SPACE_str     | SPACE
MID_str       | MID
CHR_str       | CHR
RIGHT_str     | RIGHT
LEFT_str      | LEFT

# Variables

# Line numbers
EOF

    fi

}


# If they want help then give it to them.
if [ "$arg" == "-h" ]; then
    # Let user get b2c help
    ${exe} -h

# If the second argument is empty it means user wants to compile all the projects in the src directory
elif [ "$arg" == "" ]; then
   
    # Run through all the project sub-directories...
    ls -1 |\
    while read file
    do 
        if [ -d "$file" ]; then
            # We've got a 'sumer-like' subdirectory
            pdir="$file"
            echo "  Processing: ${pdir}"
            cd "${pdir}"

            ls -1 basic/* |\
            while read bfile
            do
                # Get file name by removing the "basic/" part and the ".bas" ending
                fn=$( echo "$bfile" | sed "s/basic\///g" | sed "s/\.bas$//g" )
                echo "    Translating ${bfile}"

                if [ ! -e "${fn}.vars" ]; then
                    make_vars "${fn}"
                fi

                #opt=" -ti -cu -limos "
                opt=" -tf -cd -limos "
                echo "${exe} ${opt} -ibasic/{fn}.bas -oc/${fn}.c -v${fn}.vars  >${fn}.log"
                ${exe} ${opt} -ibasic/${fn}.bas -oc/${fn}.c -v${fn}.vars  >${fn}.log
                # bin/Debug/b2c -lisom -ti -cu -i${fn}.bas -o${fn}.c -v${fn}.vars  >${fn}.log 2>&1

                echo "    Copying updated verson of intrinsics.h"
                cp "${root}/b2c/intrinsics.h" c

                echo "    Compiling ${fn}.c"
                cd c
                goc "${fn}.c"
                cd ..
            done
           
            cd .. 
        fi
    done

    echo "Cleaning the empty files"
    clnzero 

    echo "Finished!"

else
    # Translate the given file.
    translate "$arg"
fi


# 
# end of 'b2call' script file.
#
